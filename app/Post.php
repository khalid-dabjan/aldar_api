<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

class Post extends \Dot\Posts\Models\Post
{
    public function __construct(array $attributes = array())
    {
        Carbon::setLocale('ar');
        parent::__construct($attributes);
    }

    protected static function boot()
    {
//        parent::boot(); // TODO: Change the autogenerated stub
    }

    protected $visible = [
        'id',
        'title',
        'excerpt',
        'url',
        'image_url',
        'time_ago',
        'category_name',
        'category_url',
        'author',
        'share_url',
        'content',
        'tags',
        'full_url',
        'video',
        'album',
        'has_image'
    ];

    protected $appends = [
        'image_url',
        'url',
        'time_ago',
        'category_name',
        'category_url',
        'author',
        'share_url',
        'full_url',
        'video',
        'album',
        'has_image'
    ];

    public static function search($q, $count, $offset)
    {
        return self::where('title', 'LIKE', '%' . $q . '%')
            ->orWhere('excerpt', 'LIKE', '%' . $q . '%')
            ->take($count)
            ->skip($offset)
            ->get();
    }

    public function view()
    {
        $this->views += 1;
        $this->save();
    }

    public static function getMostViewed($count, $filters = [])
    {
        $query = self::orderBy('views', 'desc')->whereBetween('created_at', [Carbon::now()->subDays(300)->toDateString(), Carbon::now()->addDays(40)->toDateString()])->take($count);
        if (isset($filters['category_slug'])) {
            $categorySlug = $filters['category_slug'];
            $query->whereHas('categories', function ($q) use ($categorySlug) {
                $q->where('categories.slug', '=', $categorySlug);
            });
        }
        return $query->get();
    }

    public function getRelated()
    {
        $post = $this;
        $related = Post::where('id', '!=', $post->id)->whereHas('tags', function ($q) use ($post) {
            $q->whereIn('id', $post->tags->toArray());
        })->take(4)->get();
        $rest = Post::take(4 - $related->count())->orderBy('views')->get();
        return $related->merge($rest);
    }

    public function getBreadcrumb()
    {
        return $this->categories;
//        foreach ($this->categories as $category) {
//            dd($category);
//        }
    }

    public function getImageUrlAttribute()
    {
        return $this->image ? url('uploads/' . $this->image->path) : url('defaults/news.png');
    }

    public function getUrlAttribute()
    {
        return '/details/' . $this->id;
    }

    public function getTimeAgoAttribute()
    {
        return $this->created_at ? $this->created_at->diffForHumans() : '';
    }

    public function getCategoryNameAttribute()
    {
        return $this->categories->first() ? $this->categories->first()->name : '';
    }

    public function getCategoryUrlAttribute()
    {
        return $this->categories->first() ? '/category/' . $this->categories->first()->slug : '';
    }

    public function getAuthorAttribute()
    {
        return $this->articleAuthor;
    }

    public function getShareUrlAttribute()
    {
        return config('app.frontend_url') . $this->url;
    }

    public function getFullUrlAttribute()
    {
        return config('app.frontend_url') . $this->url;
    }

    public function articleAuthor()
    {
        return $this->hasOne(User::class, "id", "user_id");
    }

    public function getVideoAttribute()
    {
        return ($this->relationLoaded('media') || $this->format === 'video') ? $this->media : [];
    }

    public function getAlbumAttribute()
    {
        return $this->format === 'album' && $this->galleries->first() ? $this->galleries->first()->files : [];
    }

    public function getHasImageAttribute()
    {
        return !!$this->image_id;
    }
}
